"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
function resolveRelativeFileDependenciesInPackageJson(appRootPath, pkg) {
    _resolveRelativeFileDependencies(appRootPath, pkg.dependencies);
    _resolveRelativeFileDependencies(appRootPath, pkg.devDependencies);
    return pkg;
}
exports.resolveRelativeFileDependenciesInPackageJson = resolveRelativeFileDependenciesInPackageJson;
function resolveRelativeFileDependenciesInPackageLock(appRootPath, pkg) {
    for (var _i = 0, _a = Object.keys(pkg.dependencies); _i < _a.length; _i++) {
        var packageName = _a[_i];
        pkg.dependencies[packageName].version = transformVersionString(pkg.dependencies[packageName].version, appRootPath);
    }
    return pkg;
}
exports.resolveRelativeFileDependenciesInPackageLock = resolveRelativeFileDependenciesInPackageLock;
function transformVersionString(version, appRootPath) {
    if (version.startsWith("file:") && version[5] !== "/") {
        return "file:" + path_1.resolve(appRootPath, version.slice(5));
    }
    else {
        return version;
    }
}
function _resolveRelativeFileDependencies(appRootPath, dependencies) {
    if (dependencies) {
        for (var _i = 0, _a = Object.keys(dependencies); _i < _a.length; _i++) {
            var packageName = _a[_i];
            dependencies[packageName] = transformVersionString(dependencies[packageName], appRootPath);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZVJlbGF0aXZlRmlsZURlcGVuZGVuY2llcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXNvbHZlUmVsYXRpdmVGaWxlRGVwZW5kZW5jaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQThCO0FBbUI5QixzREFFRSxXQUFtQixFQUFFLEdBQU07SUFDM0IsZ0NBQWdDLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUMvRCxnQ0FBZ0MsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBQ2xFLE1BQU0sQ0FBQyxHQUFHLENBQUE7QUFDWixDQUFDO0FBTkQsb0dBTUM7QUFFRCxzREFFRSxXQUFtQixFQUFFLEdBQU07SUFDM0IsR0FBRyxDQUFDLENBQXNCLFVBQTZCLEVBQTdCLEtBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQTdCLGNBQTZCLEVBQTdCLElBQTZCO1FBQWxELElBQU0sV0FBVyxTQUFBO1FBQ3BCLEdBQUcsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxHQUFHLHNCQUFzQixDQUM1RCxHQUFHLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sRUFDckMsV0FBVyxDQUNaLENBQUE7S0FDRjtJQUNELE1BQU0sQ0FBQyxHQUFHLENBQUE7QUFDWixDQUFDO0FBVkQsb0dBVUM7QUFFRCxnQ0FBZ0MsT0FBZSxFQUFFLFdBQW1CO0lBQ2xFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEQsTUFBTSxDQUFDLE9BQU8sR0FBRyxjQUFPLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6RCxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixNQUFNLENBQUMsT0FBTyxDQUFBO0lBQ2hCLENBQUM7QUFDSCxDQUFDO0FBRUQsMENBQ0UsV0FBbUIsRUFDbkIsWUFBZ0Q7SUFFaEQsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUNqQixHQUFHLENBQUMsQ0FBc0IsVUFBeUIsRUFBekIsS0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUF6QixjQUF5QixFQUF6QixJQUF5QjtZQUE5QyxJQUFNLFdBQVcsU0FBQTtZQUNwQixZQUFZLENBQUMsV0FBVyxDQUFDLEdBQUcsc0JBQXNCLENBQ2hELFlBQVksQ0FBQyxXQUFXLENBQUMsRUFDekIsV0FBVyxDQUNaLENBQUE7U0FDRjtJQUNILENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJwYXRoXCJcblxuaW50ZXJmYWNlIFBhY2thZ2VKc29uIHtcbiAgZGVwZW5kZW5jaWVzPzoge1xuICAgIFtwYWNrYWdlTmFtZTogc3RyaW5nXTogc3RyaW5nXG4gIH1cbiAgZGV2RGVwZW5kZW5jaWVzPzoge1xuICAgIFtwYWNrYWdlTmFtZTogc3RyaW5nXTogc3RyaW5nXG4gIH1cbn1cblxuaW50ZXJmYWNlIFBhY2thZ2VMb2NrIHtcbiAgZGVwZW5kZW5jaWVzOiB7XG4gICAgW3BhY2thZ2VOYW1lOiBzdHJpbmddOiB7XG4gICAgICB2ZXJzaW9uOiBzdHJpbmdcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVSZWxhdGl2ZUZpbGVEZXBlbmRlbmNpZXNJblBhY2thZ2VKc29uPFxuICBUIGV4dGVuZHMgUGFja2FnZUpzb25cbj4oYXBwUm9vdFBhdGg6IHN0cmluZywgcGtnOiBUKTogUGFja2FnZUpzb24ge1xuICBfcmVzb2x2ZVJlbGF0aXZlRmlsZURlcGVuZGVuY2llcyhhcHBSb290UGF0aCwgcGtnLmRlcGVuZGVuY2llcylcbiAgX3Jlc29sdmVSZWxhdGl2ZUZpbGVEZXBlbmRlbmNpZXMoYXBwUm9vdFBhdGgsIHBrZy5kZXZEZXBlbmRlbmNpZXMpXG4gIHJldHVybiBwa2dcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVSZWxhdGl2ZUZpbGVEZXBlbmRlbmNpZXNJblBhY2thZ2VMb2NrPFxuICBUIGV4dGVuZHMgUGFja2FnZUxvY2tcbj4oYXBwUm9vdFBhdGg6IHN0cmluZywgcGtnOiBUKTogUGFja2FnZUxvY2sge1xuICBmb3IgKGNvbnN0IHBhY2thZ2VOYW1lIG9mIE9iamVjdC5rZXlzKHBrZy5kZXBlbmRlbmNpZXMpKSB7XG4gICAgcGtnLmRlcGVuZGVuY2llc1twYWNrYWdlTmFtZV0udmVyc2lvbiA9IHRyYW5zZm9ybVZlcnNpb25TdHJpbmcoXG4gICAgICBwa2cuZGVwZW5kZW5jaWVzW3BhY2thZ2VOYW1lXS52ZXJzaW9uLFxuICAgICAgYXBwUm9vdFBhdGgsXG4gICAgKVxuICB9XG4gIHJldHVybiBwa2dcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtVmVyc2lvblN0cmluZyh2ZXJzaW9uOiBzdHJpbmcsIGFwcFJvb3RQYXRoOiBzdHJpbmcpIHtcbiAgaWYgKHZlcnNpb24uc3RhcnRzV2l0aChcImZpbGU6XCIpICYmIHZlcnNpb25bNV0gIT09IFwiL1wiKSB7XG4gICAgcmV0dXJuIFwiZmlsZTpcIiArIHJlc29sdmUoYXBwUm9vdFBhdGgsIHZlcnNpb24uc2xpY2UoNSkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZlcnNpb25cbiAgfVxufVxuXG5mdW5jdGlvbiBfcmVzb2x2ZVJlbGF0aXZlRmlsZURlcGVuZGVuY2llcyhcbiAgYXBwUm9vdFBhdGg6IHN0cmluZyxcbiAgZGVwZW5kZW5jaWVzPzogeyBbcGFja2FnZU5hbWU6IHN0cmluZ106IHN0cmluZyB9LFxuKSB7XG4gIGlmIChkZXBlbmRlbmNpZXMpIHtcbiAgICBmb3IgKGNvbnN0IHBhY2thZ2VOYW1lIG9mIE9iamVjdC5rZXlzKGRlcGVuZGVuY2llcykpIHtcbiAgICAgIGRlcGVuZGVuY2llc1twYWNrYWdlTmFtZV0gPSB0cmFuc2Zvcm1WZXJzaW9uU3RyaW5nKFxuICAgICAgICBkZXBlbmRlbmNpZXNbcGFja2FnZU5hbWVdLFxuICAgICAgICBhcHBSb290UGF0aCxcbiAgICAgIClcbiAgICB9XG4gIH1cbn1cbiJdfQ==