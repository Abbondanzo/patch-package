"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs-extra");
var path = require("path");
var tmp = require("tmp");
var slash = require("slash");
function _getPatchFiles(rootPatchesDir, scopedDir, acc) {
    if (scopedDir === void 0) { scopedDir = ""; }
    if (acc === void 0) { acc = []; }
    fs.readdirSync(path.join(rootPatchesDir, scopedDir)).forEach(function (filename) {
        if (filename.endsWith(".patch")) {
            acc.push(path.join(scopedDir, filename));
        }
        else if (filename.startsWith("@") &&
            fs.statSync(path.join(rootPatchesDir, filename)).isDirectory()) {
            _getPatchFiles(rootPatchesDir, filename, acc);
        }
    });
    return acc;
}
function getPatchFiles(patchesDir) {
    return _getPatchFiles(patchesDir);
}
exports.getPatchFiles = getPatchFiles;
function relativeToGitRoot(gitRoot, appRoot, filePath) {
    return slash(path.relative(gitRoot, path.resolve(appRoot, filePath)));
}
// only exported for testing
function resolvePathsInPatchFile(gitRoot, appRoot, patchFileContents) {
    // only need to replace lines starting with `---` and `+++` since
    // git ignores lines starting with `diff`
    return patchFileContents
        .split("\n")
        .map(function (line) {
        if (line.startsWith("+++") || line.startsWith("---")) {
            return (line.slice(0, 6) + relativeToGitRoot(gitRoot, appRoot, line.slice(6)));
        }
        else {
            return line;
        }
    })
        .join("\n");
}
exports.resolvePathsInPatchFile = resolvePathsInPatchFile;
function temporarilyResolvePathsAgainstGitRoot(gitRootPath, appRootPath, patchFilePath) {
    var existingPatchFileContents = fs.readFileSync(patchFilePath).toString();
    var resolvedPatchFileContents = resolvePathsInPatchFile(gitRootPath, appRootPath, existingPatchFileContents);
    var tmpFile = tmp.fileSync({ unsafeCleanup: true });
    fs.writeFileSync(tmpFile.name, resolvedPatchFileContents);
    return tmpFile.name;
}
exports.temporarilyResolvePathsAgainstGitRoot = temporarilyResolvePathsAgainstGitRoot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0Y2hGcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXRjaEZzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQThCO0FBQzlCLDJCQUE0QjtBQUM1Qix5QkFBMEI7QUFDMUIsNkJBQThCO0FBRTlCLHdCQUNFLGNBQXNCLEVBQ3RCLFNBQXNCLEVBQ3RCLEdBQWtCO0lBRGxCLDBCQUFBLEVBQUEsY0FBc0I7SUFDdEIsb0JBQUEsRUFBQSxRQUFrQjtJQUVsQixFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsUUFBUTtRQUNuRSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUE7UUFDMUMsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FDUixRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztZQUN4QixFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUM5RCxDQUFDLENBQUMsQ0FBQztZQUNELGNBQWMsQ0FBQyxjQUFjLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQy9DLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNGLE1BQU0sQ0FBQyxHQUFHLENBQUE7QUFDWixDQUFDO0FBRUQsdUJBQThCLFVBQWtCO0lBQzlDLE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDbkMsQ0FBQztBQUZELHNDQUVDO0FBRUQsMkJBQ0UsT0FBZSxFQUNmLE9BQWUsRUFDZixRQUFnQjtJQUVoQixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN2RSxDQUFDO0FBRUQsNEJBQTRCO0FBQzVCLGlDQUNFLE9BQWUsRUFDZixPQUFlLEVBQ2YsaUJBQXlCO0lBRXpCLGlFQUFpRTtJQUNqRSx5Q0FBeUM7SUFDekMsTUFBTSxDQUFDLGlCQUFpQjtTQUNyQixLQUFLLENBQUMsSUFBSSxDQUFDO1NBQ1gsR0FBRyxDQUFDLFVBQUEsSUFBSTtRQUNQLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckQsTUFBTSxDQUFDLENBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3RFLENBQUE7UUFDSCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsSUFBSSxDQUFBO1FBQ2IsQ0FBQztJQUNILENBQUMsQ0FBQztTQUNELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNmLENBQUM7QUFuQkQsMERBbUJDO0FBRUQsK0NBQ0UsV0FBbUIsRUFDbkIsV0FBbUIsRUFDbkIsYUFBcUI7SUFFckIsSUFBTSx5QkFBeUIsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFBO0lBQzNFLElBQU0seUJBQXlCLEdBQUcsdUJBQXVCLENBQ3ZELFdBQVcsRUFDWCxXQUFXLEVBQ1gseUJBQXlCLENBQzFCLENBQUE7SUFFRCxJQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDckQsRUFBRSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLHlCQUF5QixDQUFDLENBQUE7SUFDekQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUE7QUFDckIsQ0FBQztBQWZELHNGQWVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzLWV4dHJhXCJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIlxuaW1wb3J0ICogYXMgdG1wIGZyb20gXCJ0bXBcIlxuaW1wb3J0ICogYXMgc2xhc2ggZnJvbSBcInNsYXNoXCJcblxuZnVuY3Rpb24gX2dldFBhdGNoRmlsZXMoXG4gIHJvb3RQYXRjaGVzRGlyOiBzdHJpbmcsXG4gIHNjb3BlZERpcjogc3RyaW5nID0gXCJcIixcbiAgYWNjOiBzdHJpbmdbXSA9IFtdLFxuKSB7XG4gIGZzLnJlYWRkaXJTeW5jKHBhdGguam9pbihyb290UGF0Y2hlc0Rpciwgc2NvcGVkRGlyKSkuZm9yRWFjaChmaWxlbmFtZSA9PiB7XG4gICAgaWYgKGZpbGVuYW1lLmVuZHNXaXRoKFwiLnBhdGNoXCIpKSB7XG4gICAgICBhY2MucHVzaChwYXRoLmpvaW4oc2NvcGVkRGlyLCBmaWxlbmFtZSkpXG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGZpbGVuYW1lLnN0YXJ0c1dpdGgoXCJAXCIpICYmXG4gICAgICBmcy5zdGF0U3luYyhwYXRoLmpvaW4ocm9vdFBhdGNoZXNEaXIsIGZpbGVuYW1lKSkuaXNEaXJlY3RvcnkoKVxuICAgICkge1xuICAgICAgX2dldFBhdGNoRmlsZXMocm9vdFBhdGNoZXNEaXIsIGZpbGVuYW1lLCBhY2MpXG4gICAgfVxuICB9KVxuICByZXR1cm4gYWNjXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXRjaEZpbGVzKHBhdGNoZXNEaXI6IHN0cmluZykge1xuICByZXR1cm4gX2dldFBhdGNoRmlsZXMocGF0Y2hlc0Rpcilcbn1cblxuZnVuY3Rpb24gcmVsYXRpdmVUb0dpdFJvb3QoXG4gIGdpdFJvb3Q6IHN0cmluZyxcbiAgYXBwUm9vdDogc3RyaW5nLFxuICBmaWxlUGF0aDogc3RyaW5nLFxuKTogc3RyaW5nIHtcbiAgcmV0dXJuIHNsYXNoKHBhdGgucmVsYXRpdmUoZ2l0Um9vdCwgcGF0aC5yZXNvbHZlKGFwcFJvb3QsIGZpbGVQYXRoKSkpXG59XG5cbi8vIG9ubHkgZXhwb3J0ZWQgZm9yIHRlc3RpbmdcbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlUGF0aHNJblBhdGNoRmlsZShcbiAgZ2l0Um9vdDogc3RyaW5nLFxuICBhcHBSb290OiBzdHJpbmcsXG4gIHBhdGNoRmlsZUNvbnRlbnRzOiBzdHJpbmcsXG4pOiBzdHJpbmcge1xuICAvLyBvbmx5IG5lZWQgdG8gcmVwbGFjZSBsaW5lcyBzdGFydGluZyB3aXRoIGAtLS1gIGFuZCBgKysrYCBzaW5jZVxuICAvLyBnaXQgaWdub3JlcyBsaW5lcyBzdGFydGluZyB3aXRoIGBkaWZmYFxuICByZXR1cm4gcGF0Y2hGaWxlQ29udGVudHNcbiAgICAuc3BsaXQoXCJcXG5cIilcbiAgICAubWFwKGxpbmUgPT4ge1xuICAgICAgaWYgKGxpbmUuc3RhcnRzV2l0aChcIisrK1wiKSB8fCBsaW5lLnN0YXJ0c1dpdGgoXCItLS1cIikpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBsaW5lLnNsaWNlKDAsIDYpICsgcmVsYXRpdmVUb0dpdFJvb3QoZ2l0Um9vdCwgYXBwUm9vdCwgbGluZS5zbGljZSg2KSlcbiAgICAgICAgKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxpbmVcbiAgICAgIH1cbiAgICB9KVxuICAgIC5qb2luKFwiXFxuXCIpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZW1wb3JhcmlseVJlc29sdmVQYXRoc0FnYWluc3RHaXRSb290KFxuICBnaXRSb290UGF0aDogc3RyaW5nLFxuICBhcHBSb290UGF0aDogc3RyaW5nLFxuICBwYXRjaEZpbGVQYXRoOiBzdHJpbmcsXG4pOiBzdHJpbmcge1xuICBjb25zdCBleGlzdGluZ1BhdGNoRmlsZUNvbnRlbnRzID0gZnMucmVhZEZpbGVTeW5jKHBhdGNoRmlsZVBhdGgpLnRvU3RyaW5nKClcbiAgY29uc3QgcmVzb2x2ZWRQYXRjaEZpbGVDb250ZW50cyA9IHJlc29sdmVQYXRoc0luUGF0Y2hGaWxlKFxuICAgIGdpdFJvb3RQYXRoLFxuICAgIGFwcFJvb3RQYXRoLFxuICAgIGV4aXN0aW5nUGF0Y2hGaWxlQ29udGVudHMsXG4gIClcblxuICBjb25zdCB0bXBGaWxlID0gdG1wLmZpbGVTeW5jKHsgdW5zYWZlQ2xlYW51cDogdHJ1ZSB9KVxuICBmcy53cml0ZUZpbGVTeW5jKHRtcEZpbGUubmFtZSwgcmVzb2x2ZWRQYXRjaEZpbGVDb250ZW50cylcbiAgcmV0dXJuIHRtcEZpbGUubmFtZVxufVxuIl19