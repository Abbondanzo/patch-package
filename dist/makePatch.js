"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = require("chalk");
var fs = require("fs");
var path = require("path");
var rimraf = require("rimraf");
var tmp = require("tmp");
var resolveRelativeFileDependencies_1 = require("./resolveRelativeFileDependencies");
var spawnSafe_1 = require("./spawnSafe");
var patchFs_1 = require("./patchFs");
var fsExtra = require("fs-extra");
function makePatch(packageName, appPath, packageManager) {
    var nodeModulesPath = path.join(appPath, "node_modules");
    var packagePath = path.join(nodeModulesPath, packageName);
    var packageJsonPath = path.join(packagePath, "package.json");
    if (!fs.existsSync(packageJsonPath)) {
        printNoPackageFoundError(packageName, packageJsonPath);
        process.exit(1);
    }
    var packageVersion = require(packageJsonPath).version;
    var tmpRepo = tmp.dirSync({ unsafeCleanup: true });
    var tmpRepoNodeModulesPath = path.join(tmpRepo.name, "node_modules");
    var tmpRepoPackageJsonPath = path.join(tmpRepo.name, "package.json");
    var tmpRepoPackagePath = path.join(tmpRepoNodeModulesPath, packageName);
    try {
        var patchesDir_1 = path.join(appPath, "patches");
        if (!fs.existsSync(patchesDir_1)) {
            fs.mkdirSync(patchesDir_1);
        }
        else {
            // remove exsiting patch for this package, if any
            patchFs_1.getPatchFiles(patchesDir_1).forEach(function (fileName) {
                if (fileName.startsWith(packageName + ":") ||
                    fileName.startsWith(packageName + "+")) {
                    console.info(chalk_1.green("☑"), "Removing existing", path.relative(process.cwd(), path.join(patchesDir_1, fileName)));
                    fs.unlinkSync(path.join(patchesDir_1, fileName));
                }
            });
        }
        console.info(chalk_1.green("☑"), "Creating temporary folder");
        var tmpExec_1 = function (command, args) {
            return spawnSafe_1.default(command, args, { cwd: tmpRepo.name });
        };
        // reinstall a clean version of the user's node_modules in our tmp location
        fsExtra.copySync(path.join(appPath, "package.json"), path.join(tmpRepo.name, "package.json"));
        // resolve relative file paths in package.json
        fs.writeFileSync(tmpRepoPackageJsonPath, JSON.stringify(resolveRelativeFileDependencies_1.resolveRelativeFileDependenciesInPackageJson(appPath, require(tmpRepoPackageJsonPath))));
        if (packageManager === "yarn") {
            fsExtra.copySync(path.join(appPath, "yarn.lock"), path.join(tmpRepo.name, "yarn.lock"));
            console.info(chalk_1.green("☑"), "Building clean node_modules with yarn");
            tmpExec_1("yarn");
        }
        else {
            var lockFileName = packageManager === "npm-shrinkwrap"
                ? "npm-shrinkwrap.json"
                : "package-lock.json";
            var lockFileContents = JSON.parse(fsExtra.readFileSync(path.join(appPath, lockFileName)).toString());
            var resolvedLockFileContents = resolveRelativeFileDependencies_1.resolveRelativeFileDependenciesInPackageLock(appPath, lockFileContents);
            fs.writeFileSync(path.join(tmpRepo.name, lockFileName), JSON.stringify(resolvedLockFileContents));
            console.info(chalk_1.green("☑"), "Building clean node_modules with npm");
            tmpExec_1("npm", ["i"]);
        }
        // commit the package
        console.info(chalk_1.green("☑"), "Diffing your files with clean files");
        fs.writeFileSync(path.join(tmpRepo.name, ".gitignore"), "!/node_modules\n\n");
        tmpExec_1("git", ["init"]);
        var stageFiles = function () {
            tmpExec_1("git", ["add", "-f", path.join("node_modules", packageName)]);
            tmpExec_1("git", [
                "rm",
                "--cached",
                path.join("node_modules", packageName, "package.json"),
            ]);
        };
        stageFiles();
        tmpExec_1("git", ["commit", "-m", "init"]);
        // replace package with user's version
        rimraf.sync(tmpRepoPackagePath);
        fsExtra.copySync(packagePath, tmpRepoPackagePath, { recursive: true });
        // add their files to the index
        stageFiles();
        // get diff of changes
        var patch = tmpExec_1("git", ["diff", "HEAD"]).stdout.toString();
        if (patch.trim() === "") {
            console.warn("\u2049\uFE0F  Not creating patch file for package '" + packageName + "'");
            console.warn("\u2049\uFE0F  There don't appear to be any changes.");
            process.exit(1);
        }
        else {
            var patchFileName = packageName + "+" + packageVersion + ".patch";
            var patchPath = path.join(patchesDir_1, patchFileName);
            if (!fs.existsSync(path.dirname(patchPath))) {
                // scoped package
                fs.mkdirSync(path.dirname(patchPath));
            }
            fs.writeFileSync(patchPath, patch);
            console.log(chalk_1.green("✔") + " Created file patches/" + patchFileName);
        }
    }
    catch (e) {
        console.error(e);
        throw e;
    }
    finally {
        tmpRepo.removeCallback();
    }
}
exports.default = makePatch;
function printNoPackageFoundError(packageName, packageJsonPath) {
    console.error("No such package " + packageName + "\n\n  File not found: " + packageJsonPath);
}
//# sourceMappingURL=data:application/json;base64,