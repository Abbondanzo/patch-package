"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = require("chalk");
var fs = require("fs");
var path = require("path");
var spawnSafe_1 = require("./spawnSafe");
var patchFs_1 = require("./patchFs");
var git_1 = require("./git");
function findPatchFiles(appPath) {
    var gitRootPath = git_1.getGitRootPath();
    var appNotAtGitRoot = gitRootPath !== null &&
        path.normalize(appPath) !== path.normalize(gitRootPath);
    var patchesDirectory = path.join(appPath, "patches");
    if (!fs.existsSync(patchesDirectory)) {
        return [];
    }
    var files = patchFs_1.getPatchFiles(patchesDirectory).filter(function (filename) {
        return filename.match(/^.+(:|\+).+\.patch$/);
    });
    if (files.length === 0) {
        console.log(chalk_1.cyan("No patch files found"));
    }
    files.forEach(function (filename) {
        var match = filename.match(/^(.+?)(:|\+)(.+)\.patch$/);
        var packageName = match[1];
        var version = match[3];
        var packageDir = path.join(appPath, "node_modules", packageName);
        if (!fs.existsSync(packageDir)) {
            console.warn(chalk_1.red("Warning:") + " Patch file found for package " + packageName +
                (" which is not present at " + packageDir));
            return null;
        }
        var packageJson = require(path.join(packageDir, "package.json"));
        try {
            var patchFilePath = gitRootPath !== null && appNotAtGitRoot
                ? patchFs_1.temporarilyResolvePathsAgainstGitRoot(gitRootPath, appPath, path.resolve(patchesDirectory, filename))
                : path.resolve(patchesDirectory, filename);
            applyPatch(patchFilePath);
            if (packageJson.version !== version) {
                printVersionMismatchWarning(packageName, packageJson.version, version);
            }
            else {
                console.log(chalk_1.bold(packageName) + "@" + version + " " + chalk_1.green("âœ”"));
            }
        }
        catch (e) {
            // completely failed to apply patch
            printPatchApplictionFailureError(packageName, packageJson.version, version, filename);
            process.exit(1);
        }
    });
}
exports.default = findPatchFiles;
function applyPatch(patchFilePath) {
    try {
        spawnSafe_1.default("git", ["apply", "--check", "--unsafe-paths", patchFilePath], {
            logStdErrOnError: false,
        });
        spawnSafe_1.default("git", ["apply", "--unsafe-paths", patchFilePath], {
            logStdErrOnError: false,
        });
    }
    catch (e) {
        // patch cli tool has no way to fail gracefully if patch was already
        // applied, so to check, we need to try a dry-run of applying the patch in
        // reverse, and if that works it means the patch was already applied
        // sucessfully. Otherwise the patch just failed for some reason.
        spawnSafe_1.default("git", ["apply", "--reverse", "--check", "--unsafe-paths", patchFilePath], {
            logStdErrOnError: false,
        });
    }
}
exports.applyPatch = applyPatch;
function printVersionMismatchWarning(packageName, actualVersion, originalVersion) {
    console.warn("\n" + chalk_1.red("Warning:") + " patch-package detected a patch file version mismatch\n\n  Don't worry! This is probably fine. The patch was still applied\n  successfully. Here's the deets:\n\n  Patch file created for\n\n    " + packageName + "@" + chalk_1.bold(originalVersion) + "\n\n  applied to\n\n    " + packageName + "@" + chalk_1.bold(actualVersion) + "\n\n  This warning is just to give you a heads-up. There is a small chance of\n  breakage even though the patch was applied successfully. Make sure the package\n  still behaves like you expect (you wrote tests, right?) and then run\n\n    " + chalk_1.bold("patch-package " + packageName) + "\n\n  to update the version in the patch file name and make this warning go away.\n");
}
function printPatchApplictionFailureError(packageName, actualVersion, originalVersion, patchFileName) {
    console.error("\n" + chalk_1.red.bold("**ERROR**") + " " + chalk_1.red("Failed to apply patch for package " + chalk_1.bold(packageName)) + "\n\n  This error was caused because " + chalk_1.bold(packageName) + " has changed since you\n  made the patch file for it. This introduced conflicts with your patch,\n  just like a merge conflict in Git when separate incompatible changes are\n  made to the same piece of code.\n\n  Maybe this means your patch file is no longer necessary, in which case\n  hooray! Just delete it!\n\n  Otherwise, you need to manually fix the patch file. Or generate a new one\n\n  To generate a new one, just repeat the steps you made to generate the first\n  one, but accounting for the changes in " + packageName + ".\n\n  i.e. make changes, run `patch-package " + packageName + "`, and commit.\n\n  To manually fix a patch file, Run:\n\n     " + chalk_1.bold("patch -p1 -i patches/" + patchFileName + " --verbose --dry-run") + "\n\n  To list rejected hunks. A 'hunk' is a section of patch file that describes\n  one contiguous area of changes. They are numbered from 1 and begin with lines\n  that look like this:\n\n    diff --git a/node_modules/thing/thing.js b/node_modules/thing/thing.json\n\n  Remove the conflicting hunks, then manually edit files in\n\n    node_modules/" + packageName + "\n\n  to reflect the changes that the conflicting hunks were supposed to make.\n\n  Then run `patch-package " + packageName + "`\n\n  Info:\n    Patch was made for version " + chalk_1.green.bold(originalVersion) + "\n    Meanwhile node_modules/" + chalk_1.bold(packageName) + " is version " + chalk_1.red.bold(actualVersion) + "\n");
}
//# sourceMappingURL=data:application/json;base64,