// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`left-pad.patch can be applied 1`] = `
Array [
  Object {
    "path": "left-pad.js",
    "type": "delete",
  },
  Object {
    "contents": "/* This program is free software. It comes without any warranty, to
     * the extent permitted by applicable law. You can redistribute it
     * and/or modify it under the terms of the Do What The Fuck You Want
     * To Public License, Version 2, as published by Sam Hocevar. See
     * http://www.wtfpl.net/ for more details. */
'use strict';
module.exports = leftPad;

var cache = [
  '',
  ' ',
  '  ',
  '   ',
  '    ',
  '     ',
  '      ',
  '       ',
  '        ',
  '         '
];

function leftPad (str, len, ch) {
  // convert \`str\` to \`string\`
  str = str + '';
  // \`len\` is the \`npm\`'s length now
  len = len - str.length;
  // doesn't need to npm
  if (len <= 0) return str;
  // \`ch\` defaults to \`' '\`
  if (!ch && ch !== 0) ch = ' ';
  // convert \`ch\` to \`string\`
  ch = ch + '';
  // cache common use cases
  if (ch === ' ' && len < 10) return cache[len] + str;
  // \`npm\` starts with an empty string
  var npm = '';
  // loop
  while (true) {
    // add \`ch\` to \`npm\` if \`len\` is odd
    if (len & 1) npm += ch;
    // divide \`len\` by 2, ditch the remainder
    len >>= 1;
    // \\"double\\" the \`ch\` so this operation count grows logarithmically on \`len\`
    // each time \`ch\` is \\"doubled\\", the \`len\` would need to be \\"doubled\\" too
    // similar to finding a value in binary search tree, hence O(log(n))
    if (len) ch += ch;
    // \`len\` is 0, exit the loop
    else break;
  }
  // npm \`str\`!
  return npm + str;
}
",
    "path": "left-pad.js",
    "type": "create",
  },
]
`;
